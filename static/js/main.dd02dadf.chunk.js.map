{"version":3,"sources":["Todo.js","App.js","index.js"],"names":["Todo","text","completed","index","updateTodo","addTodo","deleteTodo","useState","visible","setVisible","todoRef","useRef","useEffect","ref","className","type","checked","onChange","autoFocus","e","target","value","onKeyDown","key","onBlur","trim","onClick","setTimeout","current","App","data","localStorage","getItem","JSON","parse","list","setList","filteredList","filter","todo","setItem","stringify","currentList","id","newTodo","map","todoList","length","ReactDOM","render","document","getElementById"],"mappings":"mPAGe,SAASA,EAAT,GAOX,IANFC,EAMC,EANDA,KACAC,EAKC,EALDA,UACAC,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,QACAC,EACC,EADDA,WAGA,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAGMC,EAAUC,mBAUhBC,qBAAU,WACRH,GAAW,KACV,IAcH,OACE,sBAAKI,IAAKH,EAASI,UAAWN,EAAU,cAAgB,OAAxD,UACE,uBACEM,UAAU,WACVC,KAAK,WACLC,QAASd,EACTe,SAAU,kBAAMb,EAAWD,EAAOF,GAAOC,MAE3C,uBACEgB,WAAS,EACTD,SAAU,SAACE,GAAD,OAAOf,EAAWD,EAAOgB,EAAEC,OAAOC,MAAOnB,IACnDoB,UAlCgB,SAACH,GACP,UAAVA,EAAEI,KACJlB,KAiCES,UAAWZ,EAAY,WAAa,GACpCmB,MAAOpB,EACPuB,OAAQ,SAACL,GAAD,OAAOf,EAAWD,EAAOgB,EAAEC,OAAOC,MAAMI,OAAQvB,MAE1D,sBAAMY,UAAU,OAAOY,QA3BP,WAClBjB,GAAW,GACXkB,YAAW,WACTrB,EAAWH,GAEPO,EAAQkB,SACVnB,GAAW,KAEZ,MAmBD,qBCpDS,SAASoB,IAEtB,IAAMC,EAAOC,aAAaC,QAAQ,QAClC,EAAwBzB,oBAAS,kBAAOuB,EAAOG,KAAKC,MAAMJ,GAAQ,MAAlE,mBAAOK,EAAP,KAAaC,EAAb,KAGAxB,qBAAU,WAER,IAAMyB,EAAeF,EAAKG,QAAO,SAACC,GAAD,MAAwB,KAAdA,EAAKtC,QAChD8B,aAAaS,QAAQ,OAAQP,KAAKQ,UAAUJ,MAC3C,CAACF,IAGJ,IAAM9B,EAAU,WACd+B,GAAQ,SAACM,GAAD,4BAAqBA,GAArB,CAAkC,CAAEzC,KAAM,GAAIC,WAAW,SAI7DE,EAAa,SAACuC,EAAIC,EAAS1C,GAC/BkC,GAAQ,SAACM,GAAD,OACNA,EAAYG,KAAI,SAACN,EAAMpC,GACrB,OAAIA,IAAUwC,EACL,CAAE1C,KAAM2C,EAAS1C,UAAWA,GAE9BqC,SAMPjC,EAAa,SAACqC,GAClBP,GAAQ,SAACM,GAAD,OAAiBA,EAAYJ,QAAO,SAACC,EAAMpC,GAAP,OAAiBA,IAAUwC,SAOnEG,EACY,IAAhBX,EAAKY,OACH,2CAEAZ,EAAKU,KAAI,SAACN,EAAMpC,GAAP,OACP,cAAC,EAAD,CAEEA,MAAOA,EACPF,KAAMsC,EAAKtC,KACXC,UAAWqC,EAAKrC,UAChBE,WAAYA,EACZC,QAASA,EACTC,WAAYA,GANPH,MAWb,OACE,sBAAKW,UAAU,gDAAf,UACE,4CACA,uBACA,8BAAMgC,IACN,wBAAQpB,QAASrB,EAASS,UAAU,eAApC,kBC3DNkC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.dd02dadf.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nexport default function Todo({\r\n  text,\r\n  completed,\r\n  index,\r\n  updateTodo,\r\n  addTodo,\r\n  deleteTodo,\r\n}) {\r\n  // Whether app will be visible or not\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  // Reference to component\r\n  const todoRef = useRef();\r\n\r\n  // Creates a new todo when user hits the enter key\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      addTodo();\r\n    }\r\n  };\r\n\r\n  // Sets visible to true when the component is mounted\r\n  useEffect(() => {\r\n    setVisible(true);\r\n  }, []);\r\n\r\n  // Sets visible to false when the component is unmounted\r\n  const handleClick = () => {\r\n    setVisible(false);\r\n    setTimeout(() => {\r\n      deleteTodo(index);\r\n      // If component hasn't been unmounted, sets visible to true\r\n      if (todoRef.current) {\r\n        setVisible(true);\r\n      }\r\n    }, 300);\r\n  };\r\n\r\n  return (\r\n    <div ref={todoRef} className={visible ? \"Todo active\" : \"Todo\"}>\r\n      <input\r\n        className=\"checkbox\"\r\n        type=\"checkbox\"\r\n        checked={completed}\r\n        onChange={() => updateTodo(index, text, !completed)}\r\n      />\r\n      <input\r\n        autoFocus\r\n        onChange={(e) => updateTodo(index, e.target.value, completed)}\r\n        onKeyDown={handleKeyDown}\r\n        className={completed ? \"complete\" : \"\"}\r\n        value={text}\r\n        onBlur={(e) => updateTodo(index, e.target.value.trim(), completed)}\r\n      />\r\n      <span className=\"exit\" onClick={handleClick}>\r\n        Ã—\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Todo from \"./Todo\";\r\n\r\nexport default function App() {\r\n  // Gets data from local storage\r\n  const data = localStorage.getItem(\"list\");\r\n  const [list, setList] = useState(() => (data ? JSON.parse(data) : []));\r\n\r\n  // Updates local storage whenever the list updates\r\n  useEffect(() => {\r\n    // Saves non-empty todos\r\n    const filteredList = list.filter((todo) => todo.text !== \"\");\r\n    localStorage.setItem(\"list\", JSON.stringify(filteredList));\r\n  }, [list]);\r\n\r\n  // Appends new todo to list\r\n  const addTodo = () => {\r\n    setList((currentList) => [...currentList, { text: \"\", completed: false }]);\r\n  };\r\n\r\n  // Updates a todo\r\n  const updateTodo = (id, newTodo, completed) => {\r\n    setList((currentList) =>\r\n      currentList.map((todo, index) => {\r\n        if (index === id) {\r\n          return { text: newTodo, completed: completed };\r\n        }\r\n        return todo;\r\n      })\r\n    );\r\n  };\r\n\r\n  // Deletes a todo\r\n  const deleteTodo = (id) => {\r\n    setList((currentList) => currentList.filter((todo, index) => index !== id));\r\n  };\r\n\r\n  /**\r\n   * Creates a list of Todo components using the map method.\r\n   * If the list length is 0, displays that the list is empty.\r\n   */\r\n  const todoList =\r\n    list.length === 0 ? (\r\n      <p>such empty</p>\r\n    ) : (\r\n      list.map((todo, index) => (\r\n        <Todo\r\n          key={index}\r\n          index={index}\r\n          text={todo.text}\r\n          completed={todo.completed}\r\n          updateTodo={updateTodo}\r\n          addTodo={addTodo}\r\n          deleteTodo={deleteTodo}\r\n        />\r\n      ))\r\n    );\r\n\r\n  return (\r\n    <div className=\"App col-lg-6 offset-lg-3 col-md-8 offset-md-2\">\r\n      <h1>To Do List</h1>\r\n      <hr />\r\n      <div>{todoList}</div>\r\n      <button onClick={addTodo} className=\"btn btn-dark\">\r\n        +\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}